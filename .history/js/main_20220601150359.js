import { getRandomColorPairs } from "./colorHelper.js";

const GAME_STATE = {
  PENDING: 'pending',
  PLAYING: 'playing',
  BLOCKING: 'blocking',
  FINISHED: 'finished'
}

const main = () => {
  // Game state
  const PAIRS_COUNT = 8;
  const GAME_TIME = 30;

  let selection = [];
  let gameState = GAME_STATE.PENDING;
  let timer = GAME_TIME; // seconds
  let matchCount = 0;
  let countdownInterval = null;
  let randomColorList = [];

  // Query elements. Tr·ªè v√†o c√°c ph·∫ßn t·ª≠ tr√™n DOM
  const colorItemList = document.querySelectorAll('#colorList > li');
  const timerElement = document.querySelector('.game .game__timer');
  const playAgainButton = document.querySelector('.game .game__button');
  const colorBackground = document.querySelector('.color-background');

  const init = () => {
    // Bi·∫øn ch·ª©a danh s√°ch nh·ªØng c·∫∑p m√†u. V·ªõi gi√° tr·ªã truy·ªÅn v√†o l√† 8. 8 c·∫∑p m√†u cho 16 ph·∫ßn t·ª≠
    randomColorList = getRandomColorPairs(PAIRS_COUNT);

    // Binding events. Duy·ªát qua c√°c ph·∫ßn t·ª≠ li trong th·∫ª ul v√† remove class active.
    colorItemList.forEach((item, idx) => {
      item.classList.remove('active');

      // Tr·ªè ƒë·∫øn th·∫ª ƒë·∫øn the div t∆∞∆°ng ·ª©ng c·ªßa th·∫ª li. style backgroundColor l·∫•y m√†u theo index trong danh s√°ch c·∫∑p m√†u.
      const overlayElement = item.querySelector('.overlay');
      if (overlayElement) {
        overlayElement.style.backgroundColor = randomColorList[idx];
      }

      // G√°n s·ª± ki·ªán onclick cho th·∫ª li
      item.addEventListener('click', () => handleColorClick(item, idx));
    });

    // Start count down 
    startCountdown();
  }

  // H√†m x·ª≠ l√Ω reset game
  const reset = () => {
    // Reset game state. Chuy·ªÉn t·∫•t c·∫£ state v·ªÅ m·∫∑c ƒë·ªãnh
    selection = [];
    gameState = GAME_STATE.PENDING;
    timer = GAME_TIME;
    matchCount = 0;

    timerElement.textContent = `${GAME_TIME}s`;
    colorBackground.style.backgroundColor = 'goldenrod';

    // Hide play again button. ·∫®n ƒëi button
    playAgainButton.style.display = 'none';
  }

  // Start countdown. H√†m ch·∫°y th·ªùi gian ƒë·∫øm ng∆∞·ª£c.
  const startCountdown = () => {

    // Gi√° tr·ªã gi·∫£m d·∫ßn t·ª´ bi·∫øn timer
    countdownInterval = setInterval(() => {
      // Set DOM. 
      timerElement.textContent = `${timer}s`;
      timer--;

      // Khi h·∫øt th·ªùi gian th√¨ chuy·ªÉn trang th√°i game v·ªÅ FINISHED. ClearInterval. G√°n text cho  timerElement l√† Game Over!. Hi·ªán button
      if (timer === -1) {
        gameState = GAME_STATE.FINISHED;
        clearInterval(countdownInterval);

        timerElement.textContent = 'Game Over!';
        playAgainButton.style.display = 'block';
      };
    }, 1000);
  }


  // Handle play again button. Khi click button th√¨ g·ªçi h√†m reset v√† ch·∫°y l·∫°i h√†m init
  playAgainButton.addEventListener('click', e => {
    reset();
    init();
  });

  // H√†m x·ª≠ l√Ω khi onclick th·∫ª li
  const handleColorClick = (item, idx) => {
    // C√°c tr∆∞·ªùng h·ª£p ko x·ª≠ l√Ω g√¨. item kh√¥ng t·ªìn t·∫°i, c√≥ ch·ª©a class active, trang th√°i l√† BLOCKING v√† FINISHED, khi time ch·∫°y v·ªÅ 0.
    if (
      !item
      || item.classList.contains('active')
      || gameState === GAME_STATE.BLOCKING
      || gameState === GAME_STATE.FINISHED
      || timer < 0
    ) return;

    // Add item to selection. Bi·∫øn l∆∞u ch·ªØ v·ªã tr√≠ click selection nh·∫≠n gi√° tr·ªã. th·∫ª li ƒë∆∞·ª£c add class active. N·∫øu trong m·∫£ng selection c√≥ 2 ph·∫ßn t·ª≠ th√¨ m·ªõi th·ª±c hi·ªán ƒë∆∞·ª£c ti·∫øp xu·ªëng d∆∞·ªõi. 
    selection.push(idx);
    item.classList.add('active');
    console.log(selection.length)
    if (selection.length < 2) return;

    // Check matching when two colors selected. Ki·ªÉm tra xem hai m√†u v·ª´a ƒë∆∞·ª£c ch·ªçn c√≥ c√πng m√†u ko.
    const firstColor = randomColorList[selection[0]];
    const secondColor = randomColorList[selection[1]];
    const isMatch = firstColor === secondColor;

    // in case not match, clear selection and remove active class from selected items. N·∫øu kh√¥ng tr√πng th√¨ th·ª±c hi·ªán nh·ªØng th·ª© sau.
    if (!isMatch) {
      // Chuy·ªÉn tr·∫°ng th√°i sang BLOCKING. Kh√¥ng th·ªÉ ch·ªçn ƒë∆∞·ª£c n·ªØa
      gameState = GAME_STATE.BLOCKING;
      // Set th·ªùi gian g·ª° tr·∫°ng th√°i active v√† kh·ªüi t·∫°o l·∫°i selection. ƒêi·ªÅu n√†y t∆∞∆°ng ·ª©ng v·ªõi n·∫øu nh∆∞ tr√πng th√¨ class active kh√¥ng b·ªã g·ª° b·ªè v√† c√°c √¥ tr√πng s·∫Ω hi·ªán.
      setTimeout(() => {
        colorItemList[selection[0]].classList.remove('active');
        colorItemList[selection[1]].classList.remove('active');

        selection = [];
        gameState = GAME_STATE.PLAYING;
      }, 500);
      return;
    }

    // in case of match, clear selection but keep active class. N·∫øu tr√πng th√¨ s·∫Ω ƒëi ƒë·∫øn d∆∞·ªõi n√†y. TƒÉng matchCount l√™n( khi ƒë·∫°t ƒë·ªß 8 c·∫∑p l√† win)
    matchCount++;
    // Reset ƒë·ªÉ th·ª±c hi·ªán l·ª±a ch·ªçn c·∫∑p ti·∫øp theo.
    selection = [];
    // L·∫•y m√†u tr√πng v·ª´a x√©t ƒë∆∞·ª£c ƒë∆∞a l√†m m√†u n·ªÅn
    colorBackground.style.backgroundColor = randomColorList[idx];

    // Check win state. Ki·ªÉm tra xem ƒë√£ win ch∆∞a th√¥ng qua bi·∫øn matchCount.
    if (matchCount === PAIRS_COUNT) {
      // Stop timer. Win r·ªìi th√¨ d·ª´ng lu√¥n setInterval kh√¥ng c·∫ßn ch·∫°y h·∫øt th·ªùi gian n·ªØa.
      clearInterval(countdownInterval);
      // B√°o win l√™n.
      timerElement.textContent = 'You WIN! üòç';
      // Hi·ªán button
      playAgainButton.style.display = 'block';
      // Chuy·ªÉn tr·∫°ng th√°i sang FINISHED
      gameState === GAME_STATE.FINISHED;
    }
  }


  // MAIN LOGIC
  init();
};

main();
